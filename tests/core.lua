package.loaded['runes'] = nil -- not needed in real usage, but worthy for developing runes
package.loaded['runes.spec.skip'] = nil -- not needed in real usage, but worthy for developing runes
package.loaded['runes.spec'] = nil -- not needed in real usage, but worthy for developing runes
local runes = require("runes")

local setup_spec = runes.spec{
  description = "Check that spec and test setup works correctly",
  -- `config` is a special key that allows one to configure how the tests are going to be run
  config = {
    -- When true, every test will get a new copy of the state generated by `spec_setup`
    immutable_state = false
  },

  -- `spec_setup` runs once before any test and sets up the initial state for the tests
  spec_setup = function()
    return {test_setup_times_called = 0}
  end,

  -- This runs before every test and is supplied with the state generated by `spec_setup`
  test_setup = function(state)
    state.test_setup_times_called = state.test_setup_times_called + 1

    return state
  end,

  runes.test{"_ this test is ignored",
    test = function(assert)
      assert.fail['this should never be called']()
    end,
  },

  runes.test{"this test is also ignored",
    labels = {"skip"},
    test = function(assert)
      assert.fail['this should never be called']()
    end,
  },

  runes.test{"ensure test setup works",
    test = function()
      assert.gt['should have run at least once before this test'](test_setup_times_called, 0)
    end,
  },
  runes.test{"ensure test setup ran twice -- ignoring the previous tests",
    test = function()
    assert.eq["this should be the last, then `test_setup` should've been called only twice"](test_setup_times_called, 2)
  end
  }
}

runes.run_spec(setup_spec)
